{{{file_comment}}} {{{!
  This is the input mustache-template for our state syncing machines protocol (.proto) file.
  Instead of modifying the generated .proto you should modify this file.
  Generation takes place on each build of Inexor.
  For more info about how to use this template engine, read the manual of mustache (its easy).
}}}

syntax = "proto3";

import "google/protobuf/descriptor.proto";

package {{{package}}};

service TreeService
{
  // Bidirectional Streaming
  // 
  // Accepts and reads a stream of changed values from clientside, while responding with an (independent) stream of changed value messages itself.
  // The first messages will be the metadata.
  rpc Synchronize(stream TreeEvent) returns (stream TreeEvent) {}
}

/// hardcoded events which are **not generated** but required for the Flex-Core communication in general.
enum GeneralTreeEvents
{
  NO_EVENT = 0;
  FINISHED_TREE_INTRO_SEND = 1;
}

/// We generate several messages for specific events, we mark them with an option of this enums type.
enum TreeEventTypes
{
  DUMMY_TYPE = 0; // Protobuf requires us to start from 0, but the C++ implementation initializes anything to 0. So this is a placeholder.
  TYPE_GLOBAL_VAR_MODIFIED = 1; // A global SharedVar has changed. Also SharedVar-members of a SharedClass 
                                // which was globally initialized get treated like this (since thats technically identical on Core side)
  TYPE_LIST_EVENT_ADDED = 2;    // The message for a newly created element in a SharedList.
  TYPE_LIST_EVENT_MODIFIED = 3; // The message for a modified event of a sharedlist (containing the id + the updated value).
  TYPE_LIST_EVENT_REMOVED = 4;  // The message that an element in a SharedList has been removed.
  TYPE_LIST_CLASS_VAR_DUMMY = 5;// List events each have a message, some containe a lot of sharedvars. Those get marked with this.
  TYPE_FUNCTION_EVENT = 6;      // A signal that a function should be executed on Core side.
  TYPE_FUNCTION_PARAM = 7;      // The above is a message, these are the members of that message.
};

/// This is a list of all possible SharedList template arguments (SharedList<SharedClassName> xy).
/// So one for each SharedClass, whether they get used in a SharedList somewhere or not.
/// There are 3 things which can happen to a SharedLists entry: it can be removed, modified or a new one can be added.
{{#shared_class_definitions}}{{^is_shared_list}}message list_{{definition_name_unique}}_added {
  option (message_type) = TYPE_LIST_EVENT_ADDED;
  int64 intern_shared_list_id_number = 1; // TODO we use this (and switch to a map hence), as soon as we want to work safer

{{#members}}  {{{type_protobuf}}} sharedclass_member_{{name_unique}} = {{local_index}}    [(path) = "{{{path}}}", (default_value)="{{{default_value}}}", (event_type)=TYPE_LIST_CLASS_VAR_DUMMY];
{{/members}}
}

message list_{{definition_name_unique}}_modified {
  option (message_type) = TYPE_LIST_EVENT_MODIFIED;
  int64 intern_shared_list_id_number = 1;
  oneof key {
{{#members}}    {{{type_protobuf}}} sharedclass_member_{{name_unique}} = {{local_index}}    [(path) = "{{{path}}}", (default_value)="{{{default_value}}}", (event_type)=TYPE_LIST_CLASS_VAR_DUMMY];
{{/members}}
  }
}

message list_{{{definition_name_unique}}}_removed {
  option (message_type) = TYPE_LIST_EVENT_REMOVED;
  int64 intern_shared_list_id_number = 1;
}
{{/is_shared_list}}{{/shared_class_definitions}}

/// Shared Functions can be executed through the InexorTree on flex side and get executed on Core side.
/// For each overload found in the sourcecode one message type gets generated.
{{#shared_functions}}{{#parameter_lists}}
message SharedFunction_{{function_name_unique}}_params_event_{{overload_counter}} {
  option (message_type) = TYPE_FUNCTION_EVENT;
{{#params}}  {{{type_protobuf}}} function_param_{{param_name}} = {{local_index}} [(path) = "{{param_name}}", (event_type)=TYPE_FUNCTION_PARAM];
{{/params}}
}
{{/parameter_lists}}{{/shared_functions}}

message TreeEvent
{
  oneof key {
  // the hardcoded events
    GeneralTreeEvents general_event = 20;

  // All basic global shared vars singeltons.
{{#shared_vars}}    {{{type_protobuf}}} {{{name_unique}}} = {{>index}}    [(path) = "{{{path}}}", (default_value)="{{{default_value}}}", (event_type)=TYPE_GLOBAL_VAR_MODIFIED];
{{/shared_vars}}

  // All event message for the SharedLists
{{#shared_class_definitions}}{{#is_shared_list}}{{#instances}}{{#first_template_type}}
    list_{{definition_name_unique}}_added list_{{instance_name_unique}}_added = {{>index}} [(path) = "{{{path}}}", (event_type)=TYPE_LIST_EVENT_ADDED];
    list_{{definition_name_unique}}_modified list_{{instance_name_unique}}_modified = {{>index}} [(path) = "{{{path}}}", (event_type)=TYPE_LIST_EVENT_MODIFIED];
    list_{{definition_name_unique}}_removed list_{{instance_name_unique}}_removed = {{>index}} [(path) = "{{{path}}}", (event_type)=TYPE_LIST_EVENT_REMOVED];
{{/first_template_type}}{{/instances}}{{/is_shared_list}}{{/shared_class_definitions}}

  // All event message for global SharedClasses
{{#shared_class_definitions}}{{^is_shared_list}}{{#instances}}
{{#members}}    {{{type_protobuf}}} class_{{instance_name_unique}}_var_{{{name_unique}}} = {{>index}}    [(path) = "{{{path}}}", (default_value)="{{{default_value}}}", (event_type)=TYPE_GLOBAL_VAR_MODIFIED];
{{/members}}{{/instances}}{{/is_shared_list}}{{/shared_class_definitions}}

  // All shared function events
  // TODO:!!!! WTF message names get converted to lower space!!!
{{#shared_functions}}{{#parameter_lists}}    SharedFunction_{{function_name_unique}}_params_event_{{overload_counter}} SharedFunction_{{function_name_unique}}_params_{{overload_counter}} = {{>index}} [(path) = "{{{path}}}", (event_type)=TYPE_FUNCTION_EVENT];
{{/parameter_lists}}{{/shared_functions}}
  }
}

/// We use extended options for saving metadata along the protocol.
extend google.protobuf.FieldOptions
{
  /// The path to the item in the tree.
  string path = 50000;

  /// Proto3 does not support explicit default values, so we create it as self-defined option.
  /// It needs to be statically typed, so we require anyone building a tree out of it, to convert it to the appropriate one.
  string default_value = 50001;

  // @see TreeEventTypes
  TreeEventTypes event_type = 50002;
}

extend google.protobuf.MessageOptions {
  // @see TreeEventTypes
  // TreeEventTypes event_type = 50002; WE CAN'T DO THIS CURRENTLY SINCE THAT CAUSES MULTIPLY DEFINITIONS ERRORS WITH THE FieldOptions.event_type .. protobuf-bug?
  TreeEventTypes message_type = 50002;
}
